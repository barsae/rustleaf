name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: rustleaf
            asset_name: rustleaf-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            artifact_name: rustleaf
            asset_name: rustleaf-linux-arm64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: rustleaf
            asset_name: rustleaf-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: rustleaf
            asset_name: rustleaf-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: rustleaf.exe
            asset_name: rustleaf-windows-amd64.exe
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Publish rustleaf-macros-internal
        run: cargo publish -p rustleaf-macros-internal --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true
      
      - name: Wait for crates.io to update
        run: sleep 30
      
      - name: Publish rustleaf-macros
        run: cargo publish -p rustleaf-macros --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true
      
      - name: Wait for crates.io to update
        run: sleep 30
      
      - name: Publish rustleaf
        run: cargo publish -p rustleaf --token ${{ secrets.CARGO_TOKEN }}