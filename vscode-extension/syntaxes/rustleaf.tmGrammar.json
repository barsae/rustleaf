{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "RustLeaf",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#raw-strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.documentation.rustleaf",
          "match": "///.*$"
        },
        {
          "name": "comment.line.double-slash.rustleaf",
          "match": "//.*$"
        },
        {
          "name": "comment.block.documentation.rustleaf",
          "begin": "/\\*\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        },
        {
          "name": "comment.block.rustleaf",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.rustleaf",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.rustleaf",
              "match": "\\\\[nrt\\\\\"'${}]"
            },
            {
              "name": "constant.character.escape.unicode.rustleaf",
              "match": "\\\\u\\{[0-9a-fA-F]{1,6}\\}"
            },
            {
              "name": "meta.embedded.expression.rustleaf",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                {
                  "include": "$self"
                }
              ]
            },
            {
              "name": "constant.character.escape.rustleaf",
              "match": "\\\\\\$"
            }
          ]
        }
      ]
    },
    "raw-strings": {
      "name": "string.quoted.double.raw.rustleaf",
      "begin": "r\"",
      "end": "\""
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.rustleaf",
          "match": "\\b\\d[\\d_]*\\.[\\d_]*([eE][+-]?[\\d_]+)?\\b"
        },
        {
          "name": "constant.numeric.float.rustleaf",
          "match": "\\b\\.[\\d_]+([eE][+-]?[\\d_]+)?\\b"
        },
        {
          "name": "constant.numeric.float.rustleaf",
          "match": "\\b\\d[\\d_]*([eE][+-]?[\\d_]+)\\b"
        },
        {
          "name": "constant.numeric.integer.hexadecimal.rustleaf",
          "match": "\\b0x[0-9a-fA-F][0-9a-fA-F_]*\\b"
        },
        {
          "name": "constant.numeric.integer.octal.rustleaf",
          "match": "\\b0o[0-7][0-7_]*\\b"
        },
        {
          "name": "constant.numeric.integer.binary.rustleaf",
          "match": "\\b0b[01][01_]*\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.rustleaf",
          "match": "\\b\\d[\\d_]*\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "constant.language.boolean.rustleaf",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.rustleaf",
          "match": "\\bnull\\b"
        },
        {
          "name": "keyword.control.rustleaf",
          "match": "\\b(if|else|while|for|loop|match|case|break|continue|return)\\b"
        },
        {
          "name": "keyword.control.exception.rustleaf",
          "match": "\\b(try|catch|finally|raise|with)\\b"
        },
        {
          "name": "keyword.other.rustleaf",
          "match": "\\b(var|fn|class|static|self|super|use|pub)\\b"
        },
        {
          "name": "keyword.operator.logical.rustleaf",
          "match": "\\b(and|or|xor|not|in|is)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "meta.function.definition.rustleaf",
          "match": "\\b(fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": {
              "name": "keyword.other.rustleaf"
            },
            "2": {
              "name": "entity.name.function.rustleaf"
            }
          }
        },
        {
          "name": "entity.name.function.call.rustleaf",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\("
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "meta.class.definition.rustleaf",
          "match": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.other.rustleaf"
            },
            "2": {
              "name": "entity.name.class.rustleaf"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.language.self.rustleaf",
          "match": "\\bself\\b"
        },
        {
          "name": "variable.language.super.rustleaf",
          "match": "\\bsuper\\b"
        },
        {
          "name": "variable.other.rustleaf",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.rustleaf",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.comparison.rustleaf",
          "match": "(==|!=|<|>|<=|>=)"
        },
        {
          "name": "keyword.operator.arithmetic.rustleaf",
          "match": "(\\+|-|\\*|/|%|\\*\\*)"
        },
        {
          "name": "keyword.operator.bitwise.rustleaf",
          "match": "(&|\\||\\^|~|<<|>>)"
        },
        {
          "name": "keyword.operator.range.rustleaf",
          "match": "(\\.\\.|\\.\\.=)"
        },
        {
          "name": "keyword.operator.other.rustleaf",
          "match": "(\\||->)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.section.braces.rustleaf",
          "match": "[{}]"
        },
        {
          "name": "punctuation.section.brackets.rustleaf",
          "match": "[\\[\\]]"
        },
        {
          "name": "punctuation.section.parens.rustleaf",
          "match": "[()]"
        },
        {
          "name": "punctuation.separator.comma.rustleaf",
          "match": ","
        },
        {
          "name": "punctuation.separator.dot.rustleaf",
          "match": "\\."
        },
        {
          "name": "punctuation.separator.colon.rustleaf",
          "match": ":"
        },
        {
          "name": "punctuation.separator.double-colon.rustleaf",
          "match": "::"
        },
        {
          "name": "punctuation.terminator.semicolon.rustleaf",
          "match": ";"
        }
      ]
    }
  },
  "scopeName": "source.rustleaf"
}