// Test implicit return (last expression)
fn calculate_sum(a, b) {
    var total = a + b;
    total
}

var result1 = calculate_sum(10, 15);
assert(result1 == 25);

// Test explicit return with early exit
fn find_first_positive(list) {
    for item in list {
        if item > 0 {
            return item;
        }
    }
    null
}

var result2 = find_first_positive([-1, -2, 3, 4]);
assert(result2 == 3);

var result3 = find_first_positive([-1, -2, -3]);
assert(result3 == null);

// Test return without value (returns null)
fn log_message(msg) {
    if msg == "" {
        return;
    }
    "Logged: " + msg
}

var result4 = log_message("");
assert(result4 == null);

var result5 = log_message("test");
assert(result5 == "Logged: test");